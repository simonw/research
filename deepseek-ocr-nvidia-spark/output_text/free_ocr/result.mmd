# The perils of vibe coding

Elaine Moore

new OpenAI model arrived this month with a glossy livestream, group watch parties and a lingering sense of disappointment.

The YouTube comment section was underwhelmed. “I think they are all starting to realize this isn’t going to change the world like they thought it would,” wrote one viewer. “I can see it on their faces.” But if the casual user was unimpressed, the AI model’s saving grace may be code.

Coding is generative AI’s newest battleground. With big bills to pay, high valuations to live up to and a market wobble to erase, the sector needs to prove its corporate productivity chops. Coding is loudly promoted as a business use case that already works.

For one thing, AI-generated code holds the promise of replacing programmers — a profession of very well paid people. For another, the work can be quantified. In April, Microsoft chief executive Satya Nadella said that up to 30 per cent of the company’s code was now being written by AI. Google chief executive Sundar Pichai has said the executive Sundar Pichai has said the same thing. Salesforce has paused engineering hires and Mark Zuckerberg told podcaster Joe Rogan that Meta would use AI as a “mid-level engineer” that writes code.

Meanwhile, start-ups such as Replit and Cursor’s Anysphere are trying to persuade people that with AI, anyone can code. In theory, every employee can become a software engineer.

So why aren’t we? One possibility is that it’s still too unfamiliar. But when I ask people who write code for a living they offer an alternative suggestion: unpredictability. As programmer Simon Willison put it: “A lot of people are missing how weird and funny this space is. I’ve been a computer programmer for 30 years and [AI models] don’t behave like normal computers.”

Willison is well known in the software engineering community for his AI experiments. He’s an enthusiastic vibe coder — using LLMs to generate code using natural language prompts. OpenAI’s latest model GPT-5 is, he says, his new favourite. Still, he predicts that a vibe coding crash is due if it is used to produce glitchy software.

It makes sense that programmers — people who are interested in finding new ways to solve problems — would be early adopters of LLMs. Code is a language in his garden by name. Results can be bizarre. One model ignored the prompts in favour of composing a poem. Still, his adventures in vibe coding sound like an advert for the sector. He used Anthropic’s Claude Code, the favoured model for developers, to make an OCR (optical character recognition) software loves acronyms) tool that will copy and paste text from a screenshot. He wrote software that summarises blog comments and has plans to build a custom tool that will alert him when a whale is visible from his Pacific coast home. All this by typing prompts in English. It’s sounds like the sort of thing Bill Gates might have had in mind when he wrote that natural language AI agents would bring about “the biggest revolution in computing since we went from typing commands to tapping on icons.”

But watching code appear and knowing how it works are two different things. My efforts to make my own comment summary tool produced something unworkable that gave overly long answers and then congratulated itself as a success.

Willison says he wouldn’t use AI-generated code for projects he planned to ship out unless he had reviewed each line. Not only is there the risk of hallucination but the chatbot’s desire to be agreeable means it may say an unusable idea works. That is a particular issue for those of us who don’t know how to edit the code. We risk creating software with inbuilt problems.

It may not save time either. A study published in July by the non-profit Model Evaluation and Threat Research Association was done by 16 developers — some with AI tools, some without. Those using AI assumed it had made them faster. In fact it took them nearly a fifth longer.

Several developers I spoke to said AI was best used as a way to talk through coding problems. It’s a version of something they call rubber ducking (after their habit of talking to the toys on their desk) — only this rubber duck can talk back. As one put it, code shouldn’t be judged by volume but success in what you’re trying to achieve.

Progress in AI coding is tangible. But measuring productivity gains is not as neat as a simple percentage calculation.