"""
Simple Python script demonstrating WebAssembly execution via Pyodide
This version uses only built-in Python modules (no external packages needed)
"""

import json
import math
from datetime import datetime

print("=" * 60)
print("Simple Python Example in WebAssembly")
print("Running via Pyodide - No external packages needed!")
print("=" * 60)

# ============================================================================
# 1. BASIC CALCULATIONS
# ============================================================================
print("\n1. Performing calculations...")

data = {
    'numbers': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'operations': {}
}

# Calculate statistics
data['operations']['sum'] = sum(data['numbers'])
data['operations']['average'] = sum(data['numbers']) / len(data['numbers'])
data['operations']['min'] = min(data['numbers'])
data['operations']['max'] = max(data['numbers'])

# Calculate squares
data['squares'] = [x**2 for x in data['numbers']]

# Calculate square roots
data['square_roots'] = [round(math.sqrt(x), 2) for x in data['numbers']]

print(f"Numbers: {data['numbers']}")
print(f"Sum: {data['operations']['sum']}")
print(f"Average: {data['operations']['average']}")
print(f"Min: {data['operations']['min']}")
print(f"Max: {data['operations']['max']}")

# ============================================================================
# 2. STRING PROCESSING
# ============================================================================
print("\n2. Processing text...")

text = "WebAssembly is amazing for running Python in JavaScript"
words = text.split()

analysis = {
    'original': text,
    'word_count': len(words),
    'character_count': len(text),
    'words': words,
    'word_lengths': {word: len(word) for word in words},
    'uppercase': text.upper(),
    'lowercase': text.lower()
}

print(f"Text: {text}")
print(f"Word count: {analysis['word_count']}")
print(f"Character count: {analysis['character_count']}")

# ============================================================================
# 3. DATA GENERATION
# ============================================================================
print("\n3. Generating sample data...")

# Generate fibonacci sequence
def fibonacci(n):
    fib = [0, 1]
    for i in range(2, n):
        fib.append(fib[i-1] + fib[i-2])
    return fib

fib_sequence = fibonacci(15)
print(f"Fibonacci sequence (15 numbers): {fib_sequence}")

# ============================================================================
# 4. CREATE OUTPUT FILES
# ============================================================================
print("\n4. Creating output files...")

# Create a JSON file with our data
output_data = {
    'timestamp': datetime.now().isoformat(),
    'calculations': data,
    'text_analysis': analysis,
    'fibonacci': fib_sequence,
    'message': 'This file was generated by Python running in WebAssembly!'
}

with open('/output/results.json', 'w') as f:
    json.dump(output_data, f, indent=2)

print("✓ Saved results to: /output/results.json")

# Create a text report
report = f"""
PYTHON IN WEBASSEMBLY - ANALYSIS REPORT
{'=' * 50}

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

NUMERIC ANALYSIS
{'-' * 50}
Numbers analyzed: {data['numbers']}
Sum: {data['operations']['sum']}
Average: {data['operations']['average']}
Range: {data['operations']['min']} - {data['operations']['max']}

Squares: {data['squares']}
Square roots: {data['square_roots']}

TEXT ANALYSIS
{'-' * 50}
Text: "{text}"
Words: {analysis['word_count']}
Characters: {analysis['character_count']}

FIBONACCI SEQUENCE (15 numbers)
{'-' * 50}
{fib_sequence}

{'=' * 50}
This demonstrates Python running in a WebAssembly sandbox
via Pyodide, controlled by Node.js!

No Python installation required on the host system.
All computation happens in the WebAssembly runtime.
{'=' * 50}
"""

with open('/output/report.txt', 'w') as f:
    f.write(report)

print("✓ Saved report to: /output/report.txt")

# Create a simple CSV file
csv_content = "Number,Square,SquareRoot\n"
for i, num in enumerate(data['numbers']):
    csv_content += f"{num},{data['squares'][i]},{data['square_roots'][i]}\n"

with open('/output/data.csv', 'w') as f:
    f.write(csv_content)

print("✓ Saved CSV to: /output/data.csv")

print("\n" + "=" * 60)
print("Success! All files created in /output/")
print("They will be extracted to the host filesystem automatically.")
print("=" * 60)
